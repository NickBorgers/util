name: Package Publishing

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to package'
        required: true
        default: 'latest'

env:
  GO_VERSION: '1.21'

jobs:
  homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v3
      with:
        formula-name: network-mapper
        formula-path: Formula/network-mapper.rb
        homebrew-tap: ${{ github.repository_owner }}/homebrew-tap
        download-url: https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/network-mapper-darwin-amd64.tar.gz
        commit-message: |
          network-mapper ${{ steps.version.outputs.VERSION_NUMBER }}

          Created by https://github.com/mislav/bump-homebrew-formula-action
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  chocolatey:
    name: Update Chocolatey Package
    runs-on: windows-latest
    if: github.event_name == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version
      id: version
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/', ''
        $VERSION_NUMBER = $VERSION -replace '^v', ''
        echo "VERSION=$VERSION" >> $env:GITHUB_OUTPUT
        echo "VERSION_NUMBER=$VERSION_NUMBER" >> $env:GITHUB_OUTPUT

    - name: Create Chocolatey package
      run: |
        # Create chocolatey directory structure
        mkdir chocolatey
        cd chocolatey

        # Create nuspec file
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
          <metadata>
            <id>network-mapper</id>
            <version>${{ steps.version.outputs.VERSION_NUMBER }}</version>
            <packageSourceUrl>https://github.com/${{ github.repository }}</packageSourceUrl>
            <owners>${{ github.repository_owner }}</owners>
            <title>Network Mapper</title>
            <authors>${{ github.repository_owner }}</authors>
            <projectUrl>https://github.com/${{ github.repository }}</projectUrl>
            <iconUrl>https://raw.githubusercontent.com/${{ github.repository }}/main/assets/icon.png</iconUrl>
            <licenseUrl>https://github.com/${{ github.repository }}/blob/main/LICENSE</licenseUrl>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
            <projectSourceUrl>https://github.com/${{ github.repository }}</projectSourceUrl>
            <docsUrl>https://github.com/${{ github.repository }}/blob/main/network-mapper/README.md</docsUrl>
            <bugTrackerUrl>https://github.com/${{ github.repository }}/issues</bugTrackerUrl>
            <tags>network scanner discovery visualization cli tool</tags>
            <summary>Cross-platform network discovery and visualization tool</summary>
            <description>
        Network Mapper is a CLI tool that scans your local network, discovers devices, and presents a beautiful pictographic representation of the network topology. Features include mDNS/Bonjour discovery, SSDP/UPnP scanning, MAC vendor lookup, and comprehensive service identification.
            </description>
            <releaseNotes>https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.VERSION }}</releaseNotes>
          </metadata>
          <files>
            <file src="tools\**" target="tools" />
          </files>
        </package>
        "@ | Out-File -Encoding utf8 network-mapper.nuspec

        # Create tools directory and install script
        mkdir tools

        @"
        `$ErrorActionPreference = 'Stop'
        `$packageName = 'network-mapper'
        `$url64 = 'https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/network-mapper-windows-amd64.exe'
        `$checksum64 = (Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/network-mapper-windows-amd64.exe.sha256").Content.Split(' ')[0]

        `$packageArgs = @{
          packageName   = `$packageName
          url64bit      = `$url64
          checksum64    = `$checksum64
          checksumType64= 'sha256'
          fileType      = 'exe'
          silentArgs    = '/S'
          validExitCodes= @(0)
        }

        Install-ChocolateyPackage @packageArgs
        "@ | Out-File -Encoding utf8 tools\chocolateyinstall.ps1

    - name: Test Chocolatey package
      run: |
        cd chocolatey
        choco pack
        choco install network-mapper -s . -y

    - name: Upload to Chocolatey (if API key available)
      if: env.CHOCOLATEY_API_KEY != ''
      run: |
        cd chocolatey
        choco push network-mapper.${{ steps.version.outputs.VERSION_NUMBER }}.nupkg -s https://push.chocolatey.org/ -k $env:CHOCOLATEY_API_KEY
      env:
        CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}

  debian-packages:
    name: Build Debian Packages
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Create Debian package
      run: |
        # Create package structure
        PKG_NAME="network-mapper_${{ steps.version.outputs.VERSION_NUMBER }}_${{ matrix.arch }}"
        mkdir -p ${PKG_NAME}/DEBIAN
        mkdir -p ${PKG_NAME}/usr/bin
        mkdir -p ${PKG_NAME}/usr/share/man/man1
        mkdir -p ${PKG_NAME}/usr/share/doc/network-mapper

        # Download binary
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          BINARY_NAME="network-mapper-linux-amd64"
        else
          BINARY_NAME="network-mapper-linux-arm64"
        fi

        curl -L -o ${PKG_NAME}/usr/bin/network-mapper \
          "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/${BINARY_NAME}"
        chmod +x ${PKG_NAME}/usr/bin/network-mapper

        # Create control file
        cat > ${PKG_NAME}/DEBIAN/control << EOF
        Package: network-mapper
        Version: ${{ steps.version.outputs.VERSION_NUMBER }}
        Section: net
        Priority: optional
        Architecture: ${{ matrix.arch }}
        Maintainer: ${{ github.repository_owner }} <noreply@github.com>
        Description: Cross-platform network discovery and visualization tool
         Network Mapper is a CLI tool that scans your local network, discovers
         devices, and presents a beautiful pictographic representation of the
         network topology. Features include mDNS/Bonjour discovery, SSDP/UPnP
         scanning, MAC vendor lookup, and comprehensive service identification.
        Homepage: https://github.com/${{ github.repository }}
        Depends: iputils-ping, net-tools, iproute2
        EOF

        # Create man page
        cat > ${PKG_NAME}/usr/share/man/man1/network-mapper.1 << EOF
        .TH NETWORK-MAPPER 1 "$(date +'%B %Y')" "network-mapper ${{ steps.version.outputs.VERSION_NUMBER }}" "User Commands"
        .SH NAME
        network-mapper \- Cross-platform network discovery and visualization tool
        .SH SYNOPSIS
        .B network-mapper
        [\fIOPTION\fR]...
        .SH DESCRIPTION
        Network Mapper is a CLI tool that scans your local network, discovers devices, and presents a beautiful pictographic representation of the network topology.
        .SH OPTIONS
        .TP
        \fB\-\-no\-services\fR
        Disable advanced service discovery (mDNS, SSDP, etc.)
        .TP
        \fB\-\-timeout\fR \fIint\fR
        Service discovery timeout in seconds (default 5)
        .TP
        \fB\-\-verbose\fR
        Enable verbose output
        .TP
        \fB\-h\fR, \fB\-\-help\fR
        help for network-mapper
        .TP
        \fB\-v\fR, \fB\-\-version\fR
        version for network-mapper
        .SH AUTHOR
        Written by ${{ github.repository_owner }}.
        .SH REPORTING BUGS
        Report bugs to: https://github.com/${{ github.repository }}/issues
        .SH COPYRIGHT
        This is free software; see the source for copying conditions.
        EOF

        gzip ${PKG_NAME}/usr/share/man/man1/network-mapper.1

        # Copy documentation
        cp network-mapper/README.md ${PKG_NAME}/usr/share/doc/network-mapper/
        cp LICENSE ${PKG_NAME}/usr/share/doc/network-mapper/ 2>/dev/null || true

        # Build package
        dpkg-deb --build ${PKG_NAME}

    - name: Upload Debian package
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        files: network-mapper_${{ steps.version.outputs.VERSION_NUMBER }}_${{ matrix.arch }}.deb