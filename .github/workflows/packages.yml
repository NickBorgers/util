name: Package Manager Publishing

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  update-homebrew-tap:
    name: Update Homebrew Tap
    runs-on: ubuntu-latest
    steps:
    - name: Checkout util repository
      uses: actions/checkout@v4

    - name: Get release information
      id: release_info
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

        # Download checksums from release
        RELEASE_URL="https://github.com/NickBorgers/util/releases/download/${VERSION}"

        # Download and extract SHA256 checksums
        curl -sL "${RELEASE_URL}/network-mapper-darwin-arm64.tar.gz.sha256" -o darwin-arm64.sha256
        curl -sL "${RELEASE_URL}/network-mapper-darwin-amd64.tar.gz.sha256" -o darwin-amd64.sha256
        curl -sL "${RELEASE_URL}/network-mapper-linux-arm64.tar.gz.sha256" -o linux-arm64.sha256
        curl -sL "${RELEASE_URL}/network-mapper-linux-amd64.tar.gz.sha256" -o linux-amd64.sha256

        SHA_DARWIN_ARM64=$(cut -d' ' -f1 darwin-arm64.sha256)
        SHA_DARWIN_AMD64=$(cut -d' ' -f1 darwin-amd64.sha256)
        SHA_LINUX_ARM64=$(cut -d' ' -f1 linux-arm64.sha256)
        SHA_LINUX_AMD64=$(cut -d' ' -f1 linux-amd64.sha256)

        echo "SHA_DARWIN_ARM64=${SHA_DARWIN_ARM64}" >> $GITHUB_ENV
        echo "SHA_DARWIN_AMD64=${SHA_DARWIN_AMD64}" >> $GITHUB_ENV
        echo "SHA_LINUX_ARM64=${SHA_LINUX_ARM64}" >> $GITHUB_ENV
        echo "SHA_LINUX_AMD64=${SHA_LINUX_AMD64}" >> $GITHUB_ENV

    - name: Update Homebrew formula
      run: |
        # Update the formula with actual version and checksums
        sed -i "s/version \".*\"/version \"${VERSION#v}\"/" network-mapper/homebrew/network-mapper.rb
        sed -i "s/PLACEHOLDER_SHA256_DARWIN_ARM64/${SHA_DARWIN_ARM64}/" network-mapper/homebrew/network-mapper.rb
        sed -i "s/PLACEHOLDER_SHA256_DARWIN_AMD64/${SHA_DARWIN_AMD64}/" network-mapper/homebrew/network-mapper.rb
        sed -i "s/PLACEHOLDER_SHA256_LINUX_ARM64/${SHA_LINUX_ARM64}/" network-mapper/homebrew/network-mapper.rb
        sed -i "s/PLACEHOLDER_SHA256_LINUX_AMD64/${SHA_LINUX_AMD64}/" network-mapper/homebrew/network-mapper.rb

    - name: Checkout homebrew-tap repository
      uses: actions/checkout@v4
      with:
        repository: NickBorgers/homebrew-tap
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        path: homebrew-tap

    - name: Copy formula to tap
      run: |
        mkdir -p homebrew-tap/Formula
        cp network-mapper/homebrew/network-mapper.rb homebrew-tap/Formula/

    - name: Commit and push to tap
      working-directory: homebrew-tap
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add Formula/network-mapper.rb
        git commit -m "Update network-mapper to ${VERSION}" || echo "No changes to commit"
        git push

  publish-chocolatey:
    name: Publish to Chocolatey
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get release information
      id: release_info
      shell: pwsh
      run: |
        if ("${{ github.event_name }}" -eq "release") {
          $version = "${{ github.event.release.tag_name }}"
        } else {
          $version = "${{ github.event.inputs.version }}"
        }
        $versionClean = $version -replace '^v', ''
        Write-Output "VERSION=$versionClean" >> $env:GITHUB_ENV

        # Get release notes
        if ("${{ github.event_name }}" -eq "release") {
          $releaseNotes = @"
        ${{ github.event.release.body }}
        "@
        } else {
          $releaseNotes = "Version $versionClean release. See https://github.com/NickBorgers/util/releases/tag/$version for details."
        }

        # Download checksum for Windows binary
        $releaseUrl = "https://github.com/NickBorgers/util/releases/download/$version"
        $checksumUrl = "$releaseUrl/network-mapper-windows-amd64.exe.zip.sha256"

        $checksumContent = Invoke-WebRequest -Uri $checksumUrl -UseBasicParsing
        $checksum = ($checksumContent.Content -split ' ')[0]

        Write-Output "CHECKSUM=$checksum" >> $env:GITHUB_ENV
        Write-Output "RELEASE_NOTES=$releaseNotes" >> $env:GITHUB_ENV

    - name: Update nuspec file
      shell: pwsh
      working-directory: network-mapper/chocolatey
      run: |
        $nuspecContent = Get-Content -Path "network-mapper.nuspec" -Raw
        $nuspecContent = $nuspecContent -replace '\$version\$', $env:VERSION
        $nuspecContent = $nuspecContent -replace '\$releasenotes\$', $env:RELEASE_NOTES
        Set-Content -Path "network-mapper.nuspec" -Value $nuspecContent

    - name: Update install script
      shell: pwsh
      working-directory: network-mapper/chocolatey/tools
      run: |
        $scriptContent = Get-Content -Path "chocolateyInstall.ps1" -Raw
        $scriptContent = $scriptContent -replace '\$version\$', $env:VERSION
        $scriptContent = $scriptContent -replace '\$checksum\$', $env:CHECKSUM
        Set-Content -Path "chocolateyInstall.ps1" -Value $scriptContent

    - name: Pack Chocolatey package
      shell: pwsh
      working-directory: network-mapper/chocolatey
      run: |
        choco pack network-mapper.nuspec

    - name: Push to Chocolatey
      if: github.event_name == 'release' && !github.event.release.prerelease
      shell: pwsh
      working-directory: network-mapper/chocolatey
      run: |
        choco push network-mapper.$env:VERSION.nupkg --source https://push.chocolatey.org/ --api-key ${{ secrets.CHOCOLATEY_API_KEY }}

  update-readme:
    name: Update README with Package Manager Instructions
    runs-on: ubuntu-latest
    needs: [update-homebrew-tap, publish-chocolatey]
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update README
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        VERSION_CLEAN="${VERSION#v}"

        # Update Homebrew section
        sed -i 's|# Coming soon|# Install via Homebrew|' network-mapper/README.md
        sed -i 's|brew install nickborgers/tap/network-mapper|brew tap nickborgers/tap\nbrew install network-mapper|' network-mapper/README.md

        # Update Chocolatey section
        sed -i 's|# Coming soon|# Install via Chocolatey|' network-mapper/README.md
        sed -i 's|choco install network-mapper|choco install network-mapper --version=${VERSION_CLEAN}|' network-mapper/README.md

    - name: Commit README updates
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add network-mapper/README.md
        git commit -m "docs: Update package manager installation instructions for ${VERSION}" || echo "No changes to commit"
        git push