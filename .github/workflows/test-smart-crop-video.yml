name: Test smart-crop-video

on:
  push:
    branches: [ main ]
    paths:
      - 'smart-crop-video/**'
      - '.github/workflows/test-smart-crop-video.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'smart-crop-video/**'
      - '.github/workflows/test-smart-crop-video.yml'
  workflow_dispatch:

jobs:
  test:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.11']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ffmpeg

      - name: Install Python dependencies
        working-directory: smart-crop-video
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      - name: Install Playwright browsers
        run: |
          playwright install chromium

      - name: Verify test video exists
        working-directory: smart-crop-video
        run: |
          if [ ! -f example_movie.mov ]; then
            echo "Test video example_movie.mov not found!"
            exit 1
          fi
          echo "Test video size: $(du -h example_movie.mov)"

      - name: Build Docker image
        working-directory: smart-crop-video
        run: |
          docker build -t smart-crop-video:test .

      - name: Run container tests
        working-directory: smart-crop-video
        run: |
          pytest tests/test_container.py -v --timeout=300

      - name: Run API tests
        working-directory: smart-crop-video
        run: |
          pytest tests/test_api.py -v --timeout=600

      - name: Run Web UI tests
        working-directory: smart-crop-video
        run: |
          pytest tests/test_web_ui.py -v --timeout=900

      - name: Run workflow tests
        working-directory: smart-crop-video
        run: |
          pytest tests/test_workflow.py -v --timeout=1200

      - name: Run video processing tests
        working-directory: smart-crop-video
        run: |
          pytest tests/test_video_processing.py -v --timeout=900

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            smart-crop-video/tests/test_run.log
            smart-crop-video/tests/*.log
          retention-days: 7

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-artifacts-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            /tmp/smart_crop_test_*/*.mov
            /tmp/smart_crop_test_*/*.jpg
          retention-days: 3
          if-no-files-found: ignore

      - name: Clean up Docker resources
        if: always()
        run: |
          docker system prune -af --volumes

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "All tests passed!"
            exit 0
          else
            echo "Some tests failed. Check the logs above."
            exit 1
          fi
